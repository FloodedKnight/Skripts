function GyroKineticSound(p: player):
	set {_pitch} to 1
	loop 70 times:
		play sound "entity.enderman.teleport" at volume 0.3 at pitch {_pitch} to {_p}
		add 0.01 to {_pitch}
		if mod(loop-counter, 2) = 0:
			wait 1 ticks
	#play sound "entity.enderman.teleport" at pitch 2 to {_p}
		
function GyroKineticParticles(loc: location, r: number):
	set {_y} to 4
	set {_col} to purple
	set {_colX1} to {_col}'s red value
	set {_colX2} to {_col}'s green value
	set {_colX3} to {_col}'s blue value
	loop 980 times:
		set {_v} to spherical vector radius {_r}, yaw (loop-value), pitch 0
		set {_r} to {_r} - 0.005
		set {_loc1} to location (0.004 * loop-counter) below {_loc} ~ {_v}
		draw 1 of dust using dustOption({_col}, 1) at {_loc1}
		if mod(loop-counter, 40) = 0:
			wait 1 tick
		if mod(loop-counter, 5) = 0:
			add 1 to {_colX1}
			add 1 to {_colX2} 
			add 1 to {_colX3}
			
			
			if {_colX1} > 255:
				set {_colX1} to 255
			if {_colX2} > 175:
				set {_colX2} to 175
			if {_colX3} > 255:
				set {_colX3} to 255
			set {_col} to rgb({_colX1}, {_colX2}, {_colX3})
			
function GyroKineticGlass(loc: location, r: number, loc2: location):
	set {_y} to 4
	loop 80 times:
		spawn item display at {_loc1}:
			set {_display} to last spawned item display
			set display item of {_display} to purple stained glass
			set {_x} to random number between 0 and 0.75
			set {_y} to random number between 0 and 0.75
			set {_z} to random number between 0 and 0.75
			set display scale of {_display} to vector({_x},{_y},{_z})
			add {_display} to {_displays::*}
		#if mod(loop-counter, 2) = 0:
		#	wait 1 tick
	wait 1.6 seconds
	loop {_displays::*}:
		delete entity within loop-value
		

#Shanebee
function line(l1: location, l2: location, step: number = 0.2) :: locations:
	set {_v} to vector between {_l1} and {_l2}
	set {_d} to distance between {_l1} and {_l2}
	loop ({_d} / {_step}) times:
		set vector length of {_v} to (loop-value * {_step})
		add {_l1} ~ {_v} to {_locs::*}
	return {_locs::*}
		
		
function GyroKineticPush(p: player, loc: location):
	loop all players and monsters in radius 9 of {_loc} where [input is not {_p}]:
		GyroKineticPushToMakeItLookSomewhatBetter(loop-entity, {_loc})
			
function GyroKineticPushToMakeItLookSomewhatBetter(e: entity, loc: location):
	loop 30 times:
		set {_v} to vector from {_e} to {_loc}
		push {_e} {_v} at speed 0.2
		wait 1 tick
		
function gyroWitchPart(loc: location):
	loop line(location 10 above {_loc}, {_loc}, 0.7):
		draw 100 of witch at loop-value with offset vector(0.2,0.2,0.2) with extra 0.02
		wait 1 tick

on left click:
	name of player's tool = "&5Gyrokinetic Wand"
	if {GyroExplosion::%player's uuid%::Ready} exists:
		add 1 to {GyroExplosion::%player's uuid%::Ready}

function abilActivated(p: player):
	loop 6 times:
		play sound "block.note_block.bell" at pitch (loop-counter * 0.2) to {_p}
		wait 3 ticks

function gyroLeftClick(p: player):
	if {GyroExplosion::%{_p}'s uuid%::Ready} does not exist:
		stop
	set {ForgetActionBar::%{_p}'s uuid%} to true
	while {GyroExplosion::%{_p}'s uuid%::Ready} < 5:
		send action bar "&c&lSPAM &r&7L-CLICK x%5 - {GyroExplosion::%{_p}'s uuid%::Ready}%" to {_p}
		wait 1 tick
	if {GyroExplosion::%{_p}'s uuid%::Ready} >= 5:
		abilActivated({_p})
	while {GyroExplosion::%{_p}'s uuid%::Ready} >= 5:
		if mod(loop-counter, 2) = 0:
			send action bar "&a&lEXPLOSION ACTIVATED" to {_p}
		else:
			send action bar "&2&lEXPLOSION ACTIVATED" to {_p}
		wait 3 tick
	delete {ForgetActionBar::%{_p}'s uuid%}
			

on right click:
	name of player's tool = "&5Gyrokinetic Wand":
		item cooldown of tool for player = 0 seconds
		set {_y} to player's y coordinate - 0.5
		set {_distance} to 0
		set {_loc1} to location 1 below player
		set {_loc3} to location 1 in front of player's eyes
		set {_block} to block at {_loc3}
		while {_block} is air:
			set {_loc3} to location {_distance} in front of player's eyes
			set {_block} to block at {_loc3}
			if {_block} is not air:
				if distance between the player and {_block} is greater than 45:
					message "&cYou're aiming too far away!" to player
					stop
				if {_block}'s y coordinate < player's y coordinate:
					manaUse(player, 300) = true
					set {GyroExplosion::%player's uuid%::Ready} to 0
					gyroLeftClick(player)
					GyroKinetic(player, location 1 above {_block})
					GyroKineticSound(player)
					GyroKineticPush(player, location at {_block})
					
					loop 10 times:
						if mod(loop-counter-2, 3) = 0:
							set {_countIt} to -1 * (loop-counter-2 / 3)
							GyroKineticParticles(location 5 above {_block}, {_countIt} + 9)
					gyroWitchPart(location at {_block})
					loop Sphere(location 3 above {_block}, 8, 30):
						set {_v} to vector from loop-value to (location at {_block})
						draw 0 of end rod at loop-value with offset {_v} with extra 0.09
						#GyroKineticGlass(location 10 above {_block}, {_countIt} + 7, location 1 above {_block})
					stop
				else:
					message "&cYou must be aiming at the floor for this!" to player
					stop
			add 1 to {_distance}
			
function GyroKinetic(p: player, loc1: location):
	set item cooldown of {_p}'s tool for {_p} to 1 seconds
	set {_y} to {_loc1}'s y coordinate
	set {_radius1} to 8
	loop 8 times:
		loop all blocks in radius {_radius1} around {_loc1} where [y coordinate of input is {_y}]:
			add loop-value-2 to {_fallingspawnloc::*}
		loop all blocks in radius ({_radius1} - 1) around {_loc1} where [y coordinate of input is {_y}]:
			remove loop-value-2 from {_fallingspawnloc::*}
		add falling obsidian to {_randoms::*}
		add falling bedrock to {_randoms::*}
		add falling crying obsidian to {_randoms::*}
		add falling blue terracotta to {_randoms::*}
		#add falling respawn anchor to {_randoms::*}
		add falling purple stained glass to {_randoms::*}
		add falling purple terracotta to {_randoms::*}
		loop {_fallingspawnloc::*}:
			chance of 90%
			set {_rand} to random element out of {_randoms::*}
			set {_loc} to location at loop-value-2
			set {_obbyorclay} to random integer between 1 and 3
			block at {_loc} is air
			spawn {_rand} at location 0.8 below {_loc} with nbt from "{DropItem:0}"
			loop-counter-1 < 6
			set {_e} to last spawned falling block
			set {_randPushUp} to random number between 0.01 and 0.3
			push {_e} up at speed {_randPushUp}
			set {_v} to vector from {_e} to {_loc1}
			gyroPushVec({_v}, {_e})
			gyroBlockParticles({_e})
			#push {_e} {_v} at speed 0.4
		delete {_fallingspawnloc::*}
		subtract 1 from {_radius1}
		wait 0.2 seconds
	if {GyroExplosion::%{_p}'s uuid%::Ready} >= 5:
		loop all mobs in radius 2 around {_loc1}:
			make {_p} damage loop-mob by 1
			push loop-mob up at speed 1
		create fake explosion at {_loc1}
		loop Sphere({_loc1}, 8, 30):
			set {_v} to vector from loop-value to (location at {_loc1})
			draw 0 of end rod at (location at {_loc1}) with offset {_v} with extra 0.09
	delete {GyroExplosion::%{_p}'s uuid%::Ready}

function gyroBlockParticles(e: entity):
	while {_e} is alive:
		draw 1 of dust using dustOption(white, 1) at {_e} with offset vector(0.5,0.1,0.5) with extra 0.5
		wait 1 tick
		

function gyroPushVec(v: vector, e: entity):
	wait 3 ticks
	chance of 80%
	push {_e} {_v} at speed 0.3
	
on falling block land:
	cancel event	
